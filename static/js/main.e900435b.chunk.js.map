{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Styles","styled","div","Table","columns","data","useTable","initialState","pageIndex","pageSize","sortBy","id","desc","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","className","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","onClick","disabled","length","type","defaultValue","onChange","e","target","value","Number","style","width","height","PaginationTableComponent","React","useMemo","Header","accessor","Cell","href","original","url","title","mydata","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.e900435b.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { useTable, usePagination, useSortBy } from 'react-table'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport mydata from \"./mydata/data.json\";\nimport styled from \"styled-components\";\n\n\nconst Styles = styled.div`\n\n  .page-link {\n    color: black;\n\n  }\n\n`\n\n\n\n\nfunction Table({ columns, data }) {\n    // Use the state and functions returned from useTable to build your UI\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        prepareRow,\n        page,\n        canPreviousPage,\n        canNextPage,\n        pageOptions,\n        pageCount,\n        gotoPage,\n        nextPage,\n        previousPage,\n        setPageSize,\n        state: { pageIndex, pageSize },\n    } = useTable(\n        {\n            columns,\n            data,\n            initialState: {\n                pageIndex: 0,\n                pageSize: 10,\n                sortBy: [\n                    {\n                        id: 'date',\n                        desc: true\n                    }\n                ]\n            },\n        },\n        useSortBy,\n\n        usePagination\n\n    )\n    // Render the UI for your table\n    return (\n        <div>\n            <table className=\"table\" {...getTableProps()}>\n                <thead>\n                    {headerGroups.map(headerGroup => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map(column => (\n                                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                    {column.render('Header')}\n                                    <span>\n                                        {column.isSorted\n                                            ? column.isSortedDesc\n                                                ? ' ðŸ”½'\n                                                : ' ðŸ”¼'\n                                            : ''}\n                                    </span>\n\n                                </th>\n                            ))}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                    {page.map((row, i) => {\n                        prepareRow(row)\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {row.cells.map(cell => {\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                })}\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n            {/* \n        Pagination can be built however you'd like. \n        This is just a very basic UI implementation:\n      */}\n            <ul className=\"pagination\">\n                <li className=\"page-item\" onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n                    <a className=\"page-link\">First</a>\n                </li>\n                <li className=\"page-item\" onClick={() => previousPage()} disabled={!canPreviousPage}>\n                    <a className=\"page-link\">{'<'}</a>\n                </li>\n                <li className=\"page-item\" onClick={() => nextPage()} disabled={!canNextPage}>\n                    <a className=\"page-link\">{'>'}</a>\n                </li>\n                <li className=\"page-item\" onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n                    <a className=\"page-link\">Last</a>\n                </li>\n                <li>\n                    <a className=\"page-link\">\n                        Page{' '}\n                        <strong>\n                            {pageIndex + 1} of {pageOptions.length}\n                        </strong>{' '}\n                    </a>\n                </li>\n                <li>\n                    <a className=\"page-link\">\n                        <input\n                            className=\"form-control\"\n                            type=\"number\"\n                            defaultValue={pageIndex + 1}\n                            onChange={e => {\n                                const page = e.target.value ? Number(e.target.value) - 1 : 0\n                                gotoPage(page)\n                            }}\n                            style={{ width: '100px', height: '20px' }}\n                        />\n                    </a>\n                </li>{' '}\n                <select\n                    className=\"form-control\"\n                    value={pageSize}\n                    onChange={e => {\n                        setPageSize(Number(e.target.value))\n                    }}\n                    style={{ width: '120px', height: '38px' }}\n                >\n                    {[5, 10, 20, 30, 40, 50].map(pageSize => (\n                        <option key={pageSize} value={pageSize}>\n                            Show {pageSize}\n                        </option>\n                    ))}\n                </select>\n            </ul>\n        </div >\n    )\n}\n\nfunction PaginationTableComponent() {\n\n    const columns = React.useMemo(\n        () => [\n            {\n                Header: 'Date',\n                accessor: 'date',\n                //  width: 100,\n            },\n            {\n                Header: 'Title',\n                accessor: 'title',\n                className: \"title\",\n                //  width: 250,\n                Cell: ({ row }) => <a href={row.original.url}>{row.original.title}</a>,\n            },\n            {\n                Header: 'Title(en)',\n                accessor: 'translated',\n                className: \"title\",\n                // width: 250,  \n            },\n            {\n                Header: 'Likes',\n                accessor: 'likes',\n                //  width: 60,\n\n            },\n\n        ],\n        [[\n            {\n                Header: 'Date',\n                accessor: 'date',\n                //  width: 100,\n            },\n            {\n                Header: 'Title',\n                accessor: 'title',\n                className: \"title\",\n                //  width: 250,\n                Cell: ({ row }) => <a href={row.original.url}>{row.original.title}</a>,\n            },\n            {\n                Header: 'Title(en)',\n                accessor: 'translated',\n                className: \"title\",\n                // width: 250,  \n            },\n            {\n                Header: 'Likes',\n                accessor: 'likes',\n                //  width: 60,\n\n            },\n\n        ]]\n    )\n\n\n    const data = React.useMemo(\n        () => mydata,\n        [mydata]\n    )\n\n\n    return (\n        <Styles>\n            <Table columns={columns} data={data} />\n        </Styles>\n    )\n}\n\nexport default PaginationTableComponent;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}